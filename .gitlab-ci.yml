cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
     - .gradle/wrapper
     - .gradle/caches

variables:
# CICD USER TOKEN
  TOKEN: utCGxpkEd3kAX5dLwhF-

stages:
  - build
  - "create image"
  - "deploy service"

.build_gradle_template: &build_ref
  stage: build
  image: gradle:5.1-jdk
  script:
    - gradle bootJar
  only:
    refs:
      - dev
  artifacts:
    paths:
      - build/libs/*.jar
    expire_in: 1 day

.deploy_image_branch_template: &deploy_image_branch_ref
  #PARAM
  #DOCKER_IMAGE_TAG - the docker image tag
   image: docker
   stage: "create image"
   before_script:
     - export CI_PROJECT_PATH_LOWERCASE=`echo $CI_PROJECT_PATH | tr '[:upper:]' '[:lower:]'`
   script:
     - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
     - docker build -f Dockerfile.gitlab-ci -t $CI_REGISTRY/$CI_PROJECT_PATH_LOWERCASE:${DOCKER_IMAGE_TAG} .
     - docker push $CI_REGISTRY/$CI_PROJECT_PATH_LOWERCASE:${DOCKER_IMAGE_TAG}


.deploy_service_template: &deploy_service_ref
  #PARAM
  #ENVIRONMENT_HOST - ip address docker daemon host
   image: docker
   stage: "deploy service"
   cache: {}
   script:
     - export SERVICE_NAME=${CI_COMMIT_REF_NAME}_${CI_PROJECT_NAMESPACE}_${CI_PROJECT_NAME}
     - echo "SERVICE_NAME=$SERVICE_NAME"
     - echo "IMAGE=${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}"
     - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
     - docker -H ${ENVIRONMENT_HOST} service scale $SERVICE_NAME=0
     - docker -H ${ENVIRONMENT_HOST} rmi -f $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
     - docker -H ${ENVIRONMENT_HOST} pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
     - docker -H ${ENVIRONMENT_HOST} service update --force $SERVICE_NAME --image $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
     - docker -H ${ENVIRONMENT_HOST} service scale $SERVICE_NAME=1


  #PARAM
  #TOKEN 
  #PROJECT_ID 
  #BRANCH
.invoke_pipeline: &invoke_pipeline |

  if [ 0 == `curl -s -k --request GET --header "PRIVATE-TOKEN: $TOKEN" --form status=running --form ref=$BRANCH https://gitlab.jsql.it/api/v4/projects/$PROJECT_ID/pipelines | jq length` ] ; then
          echo "No running pipelines"
  else
          echo "Running process exist"
          return 0
  fi

  if [ 0 == `curl -s -k --request GET --header "PRIVATE-TOKEN: $TOKEN" --form status=pending --form ref=$BRANCH https://gitlab.jsql.it/api/v4/projects/$PROJECT_ID/pipelines | jq length` ] ; then
          echo "No pending pipelines"
  else
          echo "Pending process exist"
          return 0
  fi

  PIPELINE_ID=`curl -s -k --request POST --header "PRIVATE-TOKEN: $TOKEN" --form ref=$BRANCH https://gitlab.jsql.it/api/v4/projects/$PROJECT_ID/pipeline | jq .id`
  echo "PIPELINE_ID= $PIPELINE_ID"

  while true
  do
    STATE=`curl -s -k --request GET --header "PRIVATE-TOKEN: $TOKEN" https://gitlab.jsql.it/api/v4/projects/$PROJECT_ID/pipelines/$PIPELINE_ID  | jq -r .status`
    echo Status pipeline $PIPELINE_ID: $STATE
    sleep 10
    if [ $STATE = success ]  ; then
      break
    fi
    
    if [ $STATE = failed ] || [ $STATE = null ]  ; then
      exit 1
    fi
  done




build:
  <<: *build_ref
  only:
    refs:
      - tags
      - dev
      - test
      - prod


create image:
  <<: *deploy_image_branch_ref
  variables:
    DOCKER_IMAGE_TAG: $CI_COMMIT_REF_NAME
  only:
      - dev
      - test
      - prod

create image tag:
  variables:
    DOCKER_IMAGE_TAG: $CI_COMMIT_TAG
  <<: *deploy_image_branch_ref
  only:
    - tags


deploy dev:
  <<: *deploy_service_ref
  variables:
    ENVIRONMENT_HOST: 172.32.1.31
#   environment:
#     name: dev
#     url: https://dev-api.jsql.it
  only:
    refs:
      - dev

deploy test:
  <<: *deploy_service_ref
  variables:
    ENVIRONMENT_HOST: 172.32.1.31
#   environment:
#     name: test
    # url: https://test-api.jsql.it
  only:
    refs:
      - test

deploy prod:
  <<: *deploy_service_ref
  variables:
    ENVIRONMENT_HOST: 172.32.1.41
#   environment:
#     name: prod
#     url: https://api.jsql.it
  only:
    refs:
      - prod


########################################################
# Invoke pipeline test app
########################################################

jsql-react-test-app:
  stage: deploy test app
  image: gempesaw/curl-jq:latest
  variables:
    PROJECT_ID: 58
    BRANCH: test
  script: 
    - *invoke_pipeline
  only:
    refs:
      - test

jsql-vue-test-app:
  stage: deploy test app
  image: gempesaw/curl-jq:latest
  variables:
    PROJECT_ID: 64
    BRANCH: test
  script: 
    - *invoke_pipeline
  only:
    refs:
      - test

jsql-angular7-test-app:
  stage: deploy test app
  image: gempesaw/curl-jq:latest
  variables:
    PROJECT_ID: 34
    BRANCH: test
  script: 
    - *invoke_pipeline
  only:
    refs:
      - test

jsql-jquery-test-app:
  stage: deploy test app
  image: gempesaw/curl-jq:latest
  variables:
    PROJECT_ID: 50
    BRANCH: test
  script: 
    - *invoke_pipeline
  only:
    refs:
      - test

jsql-angular1-test-app:
  stage: deploy test app
  image: gempesaw/curl-jq:latest
  variables:
    PROJECT_ID: 24
    BRANCH: test
  script: 
    - *invoke_pipeline
  only:
    refs:
      - test

jsql-javascript1-test-app:
  stage: deploy test app
  image: gempesaw/curl-jq:latest
  variables:
    PROJECT_ID: 44
    BRANCH: test
  script: 
    - *invoke_pipeline
  only:
    refs:
      - test

jsql-spring-boot-test-app:
  stage: deploy test app
  image: gempesaw/curl-jq:latest
  variables:
    PROJECT_ID: 61
    BRANCH: test
  script: 
    - *invoke_pipeline
  only:
    refs:
      - test

jsql-grails-test-app:
  stage: deploy test app
  image: gempesaw/curl-jq:latest
  variables:
    PROJECT_ID: 40
    BRANCH: test
  script: 
    - *invoke_pipeline
  only:
    refs:
      - test

jsql-node-test-app:
  stage: deploy test app
  image: gempesaw/curl-jq:latest
  variables:
    PROJECT_ID: 54
    BRANCH: test
  script: 
    - *invoke_pipeline
  only:
    refs:
      - test            